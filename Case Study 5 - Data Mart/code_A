-- this code is written in postgresql in the dbfiddle editor linked on the challenge page

drop table if exists clean_weekly_sales;

--create cte
with clean_date as 
(
select  *,             
	to_date(
    concat(case when length(split_part(week_date, '/', 1)) = 1 then concat('0', split_part(week_date, '/', 1))
			else split_part(week_date, '/', 1) end,
              case when length(split_part('31/8/20', '/', 2)) = 1 then concat('0', split_part('31/8/20', '/', 2))
              	else split_part('31/8/20', '/', 2) end, 
              split_part('31/8/20', '/', 3)
              ),  'DDMMYY')as clean_week_date,
  case when substring(segment, 2) = '1' then 'Young Adults'
  	when substring(segment, 2) = '2' then 'Middle Aged'
  	when substring(segment, 2) = '3' OR substring(segment, 2) = '4' then 'Retirees'
  	else NULL end as age_band,
  case when substring(segment, 1,1) ='C' then 'Couples'
  	when substring(segment, 1,1) = 'F' then 'Families'
  	else NULL end as demographic,
 cast(cast(sales as float)/transactions as decimal(5,2)) as avg_transaction
  
  from weekly_sales 
)

select 
date_part('week', clean_week_date) as week_number,
    date_part('month', clean_week_date) as month_number,
    date_part('year', clean_week_date) as calendar_year, *
into clean_weekly_sales from clean_date;

--show table
select * from clean_weekly_sales limit 10;
